#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "GRSS-IR"
  https://create.arduino.cc/cloud/things/d16a6958-fe15-400b-876a-d256795f709d

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String nMEAStrings;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <SD.h>

#define GPS_BAUD_RATE 38400
#define SERIAL_BAUD 9600

#define IDLE_THRESHOLD 10 //milliseconds

#define SDCard 4

#define WAIT_FOR_VALID_GPS

#define MAX_BASENAME_LEN (8+1) // FAT limit 8.3, +1 for \0 char
#define MAX_FILENAME_LEN (MAX_BASENAME_LEN + 1 + 3) // basename + dot + extension

#define DEBUG // if defined will output debug messages to Serial

#define GPS_ACTIVE // if defined will wait for active GPS before writing

#define  GPS_BUFFER_SIZE_TYPICAL 512  // typical buffer size, for pre-allocation

unsigned long bufferTime = millis();

String gpsBuffer = ""; // holds incoming NMEA sentences
char basenameOld[MAX_BASENAME_LEN];

String fake_nmea_string = "$GNRMC,000043.00,A,4442.69837,S,16910.92656,E,0.012,,250125,,,D,V*0D\n$GPGSV,4,1,15,05,20,115,42,10,18,287,42,13,35,126,40,15,62,095,44,1*6B";

int current_i = 0;

void setup() {
    // Initialize serial and GPS serial
    Serial.begin(SERIAL_BAUD);
    Serial1.begin(GPS_BAUD_RATE);
    // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
    delay(1500);

    initProperties();

    // Connect to Arduino IoT Cloud
    ArduinoCloud.begin(ArduinoIoTPreferredConnection, false);

    setDebugMessageLevel(2);
    ArduinoCloud.printDebugInfo();

    // Setup sd card
    initSD();
}

void loop() {
    read_serial();
    bool GPSActive;
    char dateTime[6+6+1]; //yyyymmDDHHMMSS\0
    char basename[MAX_BASENAME_LEN];
    unsigned long startTime = millis();

    unsigned long idleTime = startTime - bufferTime;
    if (idleTime < IDLE_THRESHOLD || gpsBuffer.length() < 3) {return;}

    #ifdef DEBUG
        Serial.println("[DEBUG] starting SD log");
        Serial.println(gpsBuffer);
    #endif

    GPSActive = getDateTime(gpsBuffer.c_str(), dateTime);

    getBasename(basename, dateTime, GPSActive);
    datalog(basename);

    // Check if we need to change basename
    if (strcmp(basename, basenameOld) != 0) {
        // File needs to be changed
        strcpy(basenameOld, basename);
    }
    gpsBuffer = "";
    gpsBuffer.reserve(GPS_BUFFER_SIZE_TYPICAL);
}

/*
  Since NMEAStrings is READ_WRITE variable, onNMEAStringsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNMEAStringsChange()  {
    // Add your code here to act upon NMEAStrings change
}

bool initSD() {
    if (!SD.begin(SDCard)) {
        Serial.println("[ERROR] Unable to init SD Card!");
        return false;
    }
    return true;
}


bool getDateTime(const char stringOriginal[], char dateTime[]) {
    char strTemp[82];
    char *gnrmc_str = nullptr;
    char *gnrmc_end = nullptr;

    const char *dateIn;
    const char *timeIn;
    int len;

    if (strlen(stringOriginal) == 0) {
#ifdef DEBUG
        Serial.println("[DEBUG] Empty string");
#endif
        return false;

    }
    gnrmc_str = strstr(stringOriginal, "$GNRMC");
    if (!gnrmc_str) {
#ifdef DEBUG
        Serial.println("[DEBUG] $GNRMC NMEA sentence not found!");
#endif
        return false;
    }
    if (gnrmc_str[17] != 'A') {
#ifdef DEBUG
        Serial.println("[DEBUG] GPS is not active yet!");
#endif
        return false;
    }

    gnrmc_end = strchr(gnrmc_str, '\n');
    len = (gnrmc_end - gnrmc_str) + 1;
    strncpy(strTemp, gnrmc_str, min(len, sizeof(strTemp)-1));
    strTemp[len] = '\0';

    dateIn = nth_strchr(strTemp, ',', 9) + 1;
    dateTime[0] = dateIn[4];
    dateTime[1] = dateIn[5];
    dateTime[2] = dateIn[2];
    dateTime[3] = dateIn[3];
    dateTime[4] = dateIn[0];
    dateTime[5] = dateIn[1];

    // extract time, keeping the order (hhmmss)
    timeIn = &strTemp[7];
    strncpy(&dateTime[6], timeIn, 6);

    dateTime[12] = '\n';
#ifdef DEBUG
    Serial.println("[DEBUG] GPS Date Time: " + String(dateTime));
#endif
    return true;
}

void datalog(const char basename[]) {
    char filename[MAX_FILENAME_LEN];
    strncpy(filename, basename, MAX_BASENAME_LEN);
    strcat(filename, ".log");

#ifdef DEBUG
    Serial.println("[DEBUG] Filename: " + String(filename));
#endif

    File file = SD.open(filename, FILE_WRITE);

    if (!file) {
        Serial.println("[ERROR] Failed to open file for writing. Filename: " + String(filename));
        return;
    }

    // get size to check if all has been written
    const byte len1 = gpsBuffer.length();
    const byte len2 = file.println(gpsBuffer);
    file.print("\n");

    file.close();

    if (len1 == len2) {
        blink_led();
        #ifdef DEBUG
            Serial.println("[DEBUG] Written " + String(100*len2/len1) + "% of " + String(len1) + " bytes.");
        #endif
        return;
    }
    // Show anyway if error
    Serial.println("[ERROR] Written " + String(100*len2/len1) + "% of " + String(len1) + " bytes.");
}

void getBasename(char basename[], const char dateTime[], bool gps_active) {
    if (!gps_active) {
        //use default basename
        strcpy(basename, "DEFAULT");
    }

    strncpy(basename, dateTime, 8); //8 for YYMMDDhh
    basename[8] = '\0';

#ifdef DEBUG
    Serial.println("[DEBUG] Basename: " + String(basename));
#endif

}

void read_serial() {
    while (Serial1.available()) {
        const char c = Serial1.read();
        gpsBuffer += fake_nmea_string[current_i];
        current_i++;
        if (current_i >= fake_nmea_string.length()) {
            current_i = 0;
        }
        bufferTime = millis();
    }
}

void blink_led() {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(10);
    digitalWrite(LED_BUILTIN, LOW);
}

const char* nth_strchr(const char* s, int c, int n)
{
    int c_count;
    char* nth_ptr;

    for (c_count=1,nth_ptr=strchr(s,c);
         nth_ptr != nullptr && c_count < n && c!=0;
         c_count++)
    {
        nth_ptr = strchr(nth_ptr+1, c);
    }

    return nth_ptr;
}